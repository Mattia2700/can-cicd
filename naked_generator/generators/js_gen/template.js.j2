const byteify = require('byteify');
{% for struct in structs %}
    {%- if frequencies[struct.name] != [] %}
    {%- for freq in frequencies[struct.name] %}
            {%- for frequency_name, frequency in freq.items() %}
                {%- if frequency_name == "" %}
const {{ struct.name }}_ms = {{ frequency }}
                {%- else %}
const {{ struct.name+""+utils.to_camel_case(frequency_name,"_") }}_ms = {{ frequency }}
                {%- endif %}
            {%- endfor %}
        {%- endfor %}
    {%- endif %}
function serialize{{ struct.name }}(data) {
    return Uint8Array.from([
    {%- for field_name, field_type in struct.fields.items() %}
        ...byteify.serialize{{ js_type_name(field_type) }}(data.{{ field_name }}),
    {%- endfor %}
    ]);
}
function deserialize{{ struct.name }}(bytes) {
    return {
    {%- for range, (field_name, field_type) in zip(ranges(struct), struct.fields.items()) %}
        {{ field_name }}: byteify.deserialize{{ js_type_name(field_type) }}(bytes.slice({{ "{0}, {1}".format(range[0], range[1]) }})),
    {%- endfor %}
    }
}
{% endfor %}