#include <string.h>
#include <assert.h>
#include <stdio.h>

#include "{{ filename }}.h"
#include "../../../../includes_generator/out/{{ network_name }}/ids.h"

/*
*   Utility functions
*/
void {{ network_name }}_msgname_from_id(uint32_t msg_id, char buffer[static 50]) {
    switch (msg_id) {
{%- for struct in structs %}
        case {{ "ID_{0}".format(struct.name.split("_", 1)[1]) }}:
            strcpy(buffer, "{{ struct.name }}");
            break;
{%- endfor %}
        default:
            strcpy(buffer, "unknown message id");
    }
}


{% for struct in structs -%}
/* {{ struct.name }} */
size_t serialize_{{ struct.name }}(uint8_t* buffer, {{ ", ".join(parameters(struct)) }}) {
    {{ struct.name }} {{ struct.name.lower() }} = { {{ ", ".join(fill_padding(struct)) }} };
	// assert(buf_len >= sizeof({{ struct.name }}));
	memcpy(buffer, &{{ struct.name.lower() }}, sizeof({{ struct.name }}));
    return sizeof({{ struct.name }});
} 
size_t deserialize_{{ struct.name }}(uint8_t* buffer, {{ struct.name }}* {{ struct.name.lower() }}) {
	// assert(buf_len >= sizeof({{ struct.name }}));
	memcpy({{ struct.name.lower() }}, buffer, sizeof({{ struct.name }}));
    return sizeof({{ struct.name }});
}
{% endfor -%}
