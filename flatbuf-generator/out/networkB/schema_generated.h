// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

struct ENC_L_FROM_ACU;

enum Status {
  Status_OFF = 0,
  Status_PRECHARGE = 1,
  Status_ON = 2,
  Status_FATAL = 3,
  Status_MIN = Status_OFF,
  Status_MAX = Status_FATAL
};

inline const Status (&EnumValuesStatus())[4] {
  static const Status values[] = {
    Status_OFF,
    Status_PRECHARGE,
    Status_ON,
    Status_FATAL
  };
  return values;
}

inline const char * const *EnumNamesStatus() {
  static const char * const names[5] = {
    "OFF",
    "PRECHARGE",
    "ON",
    "FATAL",
    nullptr
  };
  return names;
}

inline const char *EnumNameStatus(Status e) {
  if (flatbuffers::IsOutRange(e, Status_OFF, Status_FATAL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStatus()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) ENC_L_FROM_ACU FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t current_;
  int8_t status_;
  int8_t padding0__;

 public:
  ENC_L_FROM_ACU()
      : current_(0),
        status_(0),
        padding0__(0) {
    (void)padding0__;
  }
  ENC_L_FROM_ACU(uint16_t _current, Status _status)
      : current_(flatbuffers::EndianScalar(_current)),
        status_(flatbuffers::EndianScalar(static_cast<int8_t>(_status))),
        padding0__(0) {
    (void)padding0__;
  }
  uint16_t current() const {
    return flatbuffers::EndianScalar(current_);
  }
  Status status() const {
    return static_cast<Status>(flatbuffers::EndianScalar(status_));
  }
};
FLATBUFFERS_STRUCT_END(ENC_L_FROM_ACU, 4);

#endif  // FLATBUFFERS_GENERATED_SCHEMA_H_
