('enum Tlm_Status : byte { ON, OFF }\nenum Race_Type : byte { ACCELERATION, SKIDPAD, AUTOCROSS, ENDURANCE }\nstruct TLM_STATUS_UPDATE {\n\ttlm_status: Tlm_Status;\n\trace_type: Race_Type;\n\tdriver: uint8;\n\tcircuit: uint8;\n}', 4)

enum Race_Type : byte { ACCELERATION, SKIDPAD, AUTOCROSS, ENDURANCE }
struct TLM_STATUS_UPDATE {
	tlm_status: Tlm_Status;
	race_type: Race_Type;
	driver: uint8;
	circuit: uint8;
}


struct SET_TLM_STATUS {
	tlm_status: Tlm_Status;
	race_type: Race_Type;
	driver: uint8;
	circuit: uint8;
}

('struct HV_VOLTAGE {\n\tpack_voltage: uint16;\n\tbus_voltage: uint16;\n\tmax_cell_voltage: uint16;\n\tmin_cell_voltage: uint16;\n}', 8)

struct HV_VOLTAGE {
	pack_voltage: uint16;
	bus_voltage: uint16;
	max_cell_voltage: uint16;
	min_cell_voltage: uint16;
}

('struct HV_CURRENT {\n\tcurrent: uint16;\n\tpower: int8;\n}', 3)

struct HV_CURRENT {
	current: uint16;
	power: int8;
}

('struct HV_TEMP {\n\taverage_temp: uint16;\n\tmax_temp: uint16;\n\tmin_temp: uint16;\n}', 6)

struct HV_TEMP {
	average_temp: uint16;
	max_temp: uint16;
	min_temp: uint16;
}

('struct HV_ERROR {\n\terror_code: uint8;\n\terror_index: uint8;\n\tactive: uint8;\n}', 3)

struct HV_ERROR {
	error_code: uint8;
	error_index: uint8;
	active: uint8;
}

('enum Ts_Status : byte { OFF, PRECHARGE, ON, FATAL }\nstruct TS_STATUS_UPDATE {\n\tts_status: Ts_Status;\n}', 1)

struct TS_STATUS_UPDATE {
	ts_status: Ts_Status;
}

('enum Ts_Status_Set : byte { OFF, ON }\nstruct SET_TS_STATUS {\n\tts_status_set: Ts_Status_Set;\n}', 1)

struct SET_TS_STATUS {
	ts_status_set: Ts_Status_Set;
}

('enum Traction_Control : byte { OFF, SLIP_CONTROL, TORQUE_VECTORING, COMPLETE }\nenum Map : byte { R, D20, D40, D60, D80, D100 }\nstruct STEER_STATUS_UPDATE {\n\ttraction_control: Traction_Control;\n\tmap: Map;\n\tradio_on: bool;\n}', 3)

enum Map : byte { R, D20, D40, D60, D80, D100 }
struct STEER_STATUS_UPDATE {
	traction_control: Traction_Control;
	map: Map;
	radio_on: bool;
}

('enum Car_Status_Set : byte { IDLE, RUN }\nstruct SET_CAR_STATUS {\n\tcar_status_set: Car_Status_Set;\n}', 1)

struct SET_CAR_STATUS {
	car_status_set: Car_Status_Set;
}

('enum Car_Status : byte { IDLE, SETUP, RUN }\nenum Inverter_Status : byte { OFF, IDLE, ON }\nenum Inverter_Status : byte { OFF, IDLE, ON }\nstruct CAR_STATUS_UPDATE {\n\tcar_status: Car_Status;\n\tinverter_l: Inverter_Status;\n\tinverter_r: Inverter_Status;\n}', 3)

enum Inverter_Status : byte { OFF, IDLE, ON }
struct CAR_STATUS_UPDATE {
	car_status: Car_Status;
	inverter_l: Inverter_Status;
	inverter_r: Inverter_Status;
}

('enum Bound : byte { MAX, MIN }\nstruct SET_PEDALS_RANGE {\n\tbound: Bound;\n}', 1)

struct SET_PEDALS_RANGE {
	bound: Bound;
}


