// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

struct TLM_STATUS_CHANGED;

struct HV_VOLTAGE;

struct HV_CURRENT;

struct HV_TEMP;

struct HV_ERROR;

struct HV_STATUS;

enum Status {
  Status_TS_OFF = 0,
  Status_PRECHARGE = 1,
  Status_TS_ON = 2,
  Status_FATAL = 3,
  Status_MIN = Status_TS_OFF,
  Status_MAX = Status_FATAL
};

inline const Status (&EnumValuesStatus())[4] {
  static const Status values[] = {
    Status_TS_OFF,
    Status_PRECHARGE,
    Status_TS_ON,
    Status_FATAL
  };
  return values;
}

inline const char * const *EnumNamesStatus() {
  static const char * const names[5] = {
    "TS_OFF",
    "PRECHARGE",
    "TS_ON",
    "FATAL",
    nullptr
  };
  return names;
}

inline const char *EnumNameStatus(Status e) {
  if (flatbuffers::IsOutRange(e, Status_TS_OFF, Status_FATAL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStatus()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) TLM_STATUS_CHANGED FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t enabled_;
  uint8_t selected_pilot_;
  uint8_t selected_rage_;
  int8_t padding0__;
  uint32_t timestamp_;

 public:
  TLM_STATUS_CHANGED()
      : enabled_(0),
        selected_pilot_(0),
        selected_rage_(0),
        padding0__(0),
        timestamp_(0) {
    (void)padding0__;
  }
  TLM_STATUS_CHANGED(uint8_t _enabled, uint8_t _selected_pilot, uint8_t _selected_rage, uint32_t _timestamp)
      : enabled_(flatbuffers::EndianScalar(_enabled)),
        selected_pilot_(flatbuffers::EndianScalar(_selected_pilot)),
        selected_rage_(flatbuffers::EndianScalar(_selected_rage)),
        padding0__(0),
        timestamp_(flatbuffers::EndianScalar(_timestamp)) {
    (void)padding0__;
  }
  uint8_t enabled() const {
    return flatbuffers::EndianScalar(enabled_);
  }
  uint8_t selected_pilot() const {
    return flatbuffers::EndianScalar(selected_pilot_);
  }
  uint8_t selected_rage() const {
    return flatbuffers::EndianScalar(selected_rage_);
  }
  uint32_t timestamp() const {
    return flatbuffers::EndianScalar(timestamp_);
  }
};
FLATBUFFERS_STRUCT_END(TLM_STATUS_CHANGED, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) HV_VOLTAGE FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t pack_voltage_;
  uint32_t bus_voltage_;
  uint16_t max_cell_voltage_;
  uint16_t min_cell_voltage_;

 public:
  HV_VOLTAGE()
      : pack_voltage_(0),
        bus_voltage_(0),
        max_cell_voltage_(0),
        min_cell_voltage_(0) {
  }
  HV_VOLTAGE(uint32_t _pack_voltage, uint32_t _bus_voltage, uint16_t _max_cell_voltage, uint16_t _min_cell_voltage)
      : pack_voltage_(flatbuffers::EndianScalar(_pack_voltage)),
        bus_voltage_(flatbuffers::EndianScalar(_bus_voltage)),
        max_cell_voltage_(flatbuffers::EndianScalar(_max_cell_voltage)),
        min_cell_voltage_(flatbuffers::EndianScalar(_min_cell_voltage)) {
  }
  uint32_t pack_voltage() const {
    return flatbuffers::EndianScalar(pack_voltage_);
  }
  uint32_t bus_voltage() const {
    return flatbuffers::EndianScalar(bus_voltage_);
  }
  uint16_t max_cell_voltage() const {
    return flatbuffers::EndianScalar(max_cell_voltage_);
  }
  uint16_t min_cell_voltage() const {
    return flatbuffers::EndianScalar(min_cell_voltage_);
  }
};
FLATBUFFERS_STRUCT_END(HV_VOLTAGE, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) HV_CURRENT FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t current_;
  int8_t power_;
  int8_t padding0__;

 public:
  HV_CURRENT()
      : current_(0),
        power_(0),
        padding0__(0) {
    (void)padding0__;
  }
  HV_CURRENT(uint16_t _current, int8_t _power)
      : current_(flatbuffers::EndianScalar(_current)),
        power_(flatbuffers::EndianScalar(_power)),
        padding0__(0) {
    (void)padding0__;
  }
  uint16_t current() const {
    return flatbuffers::EndianScalar(current_);
  }
  int8_t power() const {
    return flatbuffers::EndianScalar(power_);
  }
};
FLATBUFFERS_STRUCT_END(HV_CURRENT, 4);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) HV_TEMP FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t average_temp_;
  uint16_t max_temp_;
  uint16_t min_temp_;

 public:
  HV_TEMP()
      : average_temp_(0),
        max_temp_(0),
        min_temp_(0) {
  }
  HV_TEMP(uint16_t _average_temp, uint16_t _max_temp, uint16_t _min_temp)
      : average_temp_(flatbuffers::EndianScalar(_average_temp)),
        max_temp_(flatbuffers::EndianScalar(_max_temp)),
        min_temp_(flatbuffers::EndianScalar(_min_temp)) {
  }
  uint16_t average_temp() const {
    return flatbuffers::EndianScalar(average_temp_);
  }
  uint16_t max_temp() const {
    return flatbuffers::EndianScalar(max_temp_);
  }
  uint16_t min_temp() const {
    return flatbuffers::EndianScalar(min_temp_);
  }
};
FLATBUFFERS_STRUCT_END(HV_TEMP, 6);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) HV_ERROR FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t error_code_;
  uint8_t error_index_;
  uint8_t active_;

 public:
  HV_ERROR()
      : error_code_(0),
        error_index_(0),
        active_(0) {
  }
  HV_ERROR(uint8_t _error_code, uint8_t _error_index, uint8_t _active)
      : error_code_(flatbuffers::EndianScalar(_error_code)),
        error_index_(flatbuffers::EndianScalar(_error_index)),
        active_(flatbuffers::EndianScalar(_active)) {
  }
  uint8_t error_code() const {
    return flatbuffers::EndianScalar(error_code_);
  }
  uint8_t error_index() const {
    return flatbuffers::EndianScalar(error_index_);
  }
  uint8_t active() const {
    return flatbuffers::EndianScalar(active_);
  }
};
FLATBUFFERS_STRUCT_END(HV_ERROR, 3);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) HV_STATUS FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t status_;

 public:
  HV_STATUS()
      : status_(0) {
  }
  HV_STATUS(Status _status)
      : status_(flatbuffers::EndianScalar(static_cast<int8_t>(_status))) {
  }
  Status status() const {
    return static_cast<Status>(flatbuffers::EndianScalar(status_));
  }
};
FLATBUFFERS_STRUCT_END(HV_STATUS, 1);

#endif  // FLATBUFFERS_GENERATED_SCHEMA_H_
