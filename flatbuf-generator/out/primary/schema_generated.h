// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

struct TLM_STATUS_UPDATE;

struct SET_TLM_STATUS;

struct HV_VOLTAGE;

struct HV_CURRENT;

struct HV_TEMP;

struct HV_ERROR;

struct TS_STATUS_UPDATE;

struct SET_TS_STATUS;

enum Tlm_Status {
  Tlm_Status_ON = 0,
  Tlm_Status_OFF = 1,
  Tlm_Status_MIN = Tlm_Status_ON,
  Tlm_Status_MAX = Tlm_Status_OFF
};

inline const Tlm_Status (&EnumValuesTlm_Status())[2] {
  static const Tlm_Status values[] = {
    Tlm_Status_ON,
    Tlm_Status_OFF
  };
  return values;
}

inline const char * const *EnumNamesTlm_Status() {
  static const char * const names[3] = {
    "ON",
    "OFF",
    nullptr
  };
  return names;
}

inline const char *EnumNameTlm_Status(Tlm_Status e) {
  if (flatbuffers::IsOutRange(e, Tlm_Status_ON, Tlm_Status_OFF)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTlm_Status()[index];
}

enum Test {
  Test_ACCELERATION = 0,
  Test_SKIDPAD = 1,
  Test_AUTOCROSS = 2,
  Test_ENDURANCE = 3,
  Test_MIN = Test_ACCELERATION,
  Test_MAX = Test_ENDURANCE
};

inline const Test (&EnumValuesTest())[4] {
  static const Test values[] = {
    Test_ACCELERATION,
    Test_SKIDPAD,
    Test_AUTOCROSS,
    Test_ENDURANCE
  };
  return values;
}

inline const char * const *EnumNamesTest() {
  static const char * const names[5] = {
    "ACCELERATION",
    "SKIDPAD",
    "AUTOCROSS",
    "ENDURANCE",
    nullptr
  };
  return names;
}

inline const char *EnumNameTest(Test e) {
  if (flatbuffers::IsOutRange(e, Test_ACCELERATION, Test_ENDURANCE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTest()[index];
}

enum Ts_Status {
  Ts_Status_TS_OFF = 0,
  Ts_Status_PRECHARGE = 1,
  Ts_Status_TS_ON = 2,
  Ts_Status_FATAL = 3,
  Ts_Status_MIN = Ts_Status_TS_OFF,
  Ts_Status_MAX = Ts_Status_FATAL
};

inline const Ts_Status (&EnumValuesTs_Status())[4] {
  static const Ts_Status values[] = {
    Ts_Status_TS_OFF,
    Ts_Status_PRECHARGE,
    Ts_Status_TS_ON,
    Ts_Status_FATAL
  };
  return values;
}

inline const char * const *EnumNamesTs_Status() {
  static const char * const names[5] = {
    "TS_OFF",
    "PRECHARGE",
    "TS_ON",
    "FATAL",
    nullptr
  };
  return names;
}

inline const char *EnumNameTs_Status(Ts_Status e) {
  if (flatbuffers::IsOutRange(e, Ts_Status_TS_OFF, Ts_Status_FATAL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTs_Status()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) TLM_STATUS_UPDATE FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t tlm_status_;
  int8_t test_;
  uint8_t driver_;
  uint8_t map_;

 public:
  TLM_STATUS_UPDATE()
      : tlm_status_(0),
        test_(0),
        driver_(0),
        map_(0) {
  }
  TLM_STATUS_UPDATE(Tlm_Status _tlm_status, Test _test, uint8_t _driver, uint8_t _map)
      : tlm_status_(flatbuffers::EndianScalar(static_cast<int8_t>(_tlm_status))),
        test_(flatbuffers::EndianScalar(static_cast<int8_t>(_test))),
        driver_(flatbuffers::EndianScalar(_driver)),
        map_(flatbuffers::EndianScalar(_map)) {
  }
  Tlm_Status tlm_status() const {
    return static_cast<Tlm_Status>(flatbuffers::EndianScalar(tlm_status_));
  }
  Test test() const {
    return static_cast<Test>(flatbuffers::EndianScalar(test_));
  }
  uint8_t driver() const {
    return flatbuffers::EndianScalar(driver_);
  }
  uint8_t map() const {
    return flatbuffers::EndianScalar(map_);
  }
};
FLATBUFFERS_STRUCT_END(TLM_STATUS_UPDATE, 4);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) SET_TLM_STATUS FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t tlm_status_;
  int8_t test_;
  uint8_t driver_;
  uint8_t map_;

 public:
  SET_TLM_STATUS()
      : tlm_status_(0),
        test_(0),
        driver_(0),
        map_(0) {
  }
  SET_TLM_STATUS(Tlm_Status _tlm_status, Test _test, uint8_t _driver, uint8_t _map)
      : tlm_status_(flatbuffers::EndianScalar(static_cast<int8_t>(_tlm_status))),
        test_(flatbuffers::EndianScalar(static_cast<int8_t>(_test))),
        driver_(flatbuffers::EndianScalar(_driver)),
        map_(flatbuffers::EndianScalar(_map)) {
  }
  Tlm_Status tlm_status() const {
    return static_cast<Tlm_Status>(flatbuffers::EndianScalar(tlm_status_));
  }
  Test test() const {
    return static_cast<Test>(flatbuffers::EndianScalar(test_));
  }
  uint8_t driver() const {
    return flatbuffers::EndianScalar(driver_);
  }
  uint8_t map() const {
    return flatbuffers::EndianScalar(map_);
  }
};
FLATBUFFERS_STRUCT_END(SET_TLM_STATUS, 4);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) HV_VOLTAGE FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t pack_voltage_;
  uint32_t bus_voltage_;
  uint16_t max_cell_voltage_;
  uint16_t min_cell_voltage_;

 public:
  HV_VOLTAGE()
      : pack_voltage_(0),
        bus_voltage_(0),
        max_cell_voltage_(0),
        min_cell_voltage_(0) {
  }
  HV_VOLTAGE(uint32_t _pack_voltage, uint32_t _bus_voltage, uint16_t _max_cell_voltage, uint16_t _min_cell_voltage)
      : pack_voltage_(flatbuffers::EndianScalar(_pack_voltage)),
        bus_voltage_(flatbuffers::EndianScalar(_bus_voltage)),
        max_cell_voltage_(flatbuffers::EndianScalar(_max_cell_voltage)),
        min_cell_voltage_(flatbuffers::EndianScalar(_min_cell_voltage)) {
  }
  uint32_t pack_voltage() const {
    return flatbuffers::EndianScalar(pack_voltage_);
  }
  uint32_t bus_voltage() const {
    return flatbuffers::EndianScalar(bus_voltage_);
  }
  uint16_t max_cell_voltage() const {
    return flatbuffers::EndianScalar(max_cell_voltage_);
  }
  uint16_t min_cell_voltage() const {
    return flatbuffers::EndianScalar(min_cell_voltage_);
  }
};
FLATBUFFERS_STRUCT_END(HV_VOLTAGE, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) HV_CURRENT FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t current_;
  int8_t power_;
  int8_t padding0__;

 public:
  HV_CURRENT()
      : current_(0),
        power_(0),
        padding0__(0) {
    (void)padding0__;
  }
  HV_CURRENT(uint16_t _current, int8_t _power)
      : current_(flatbuffers::EndianScalar(_current)),
        power_(flatbuffers::EndianScalar(_power)),
        padding0__(0) {
    (void)padding0__;
  }
  uint16_t current() const {
    return flatbuffers::EndianScalar(current_);
  }
  int8_t power() const {
    return flatbuffers::EndianScalar(power_);
  }
};
FLATBUFFERS_STRUCT_END(HV_CURRENT, 4);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) HV_TEMP FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t average_temp_;
  uint16_t max_temp_;
  uint16_t min_temp_;

 public:
  HV_TEMP()
      : average_temp_(0),
        max_temp_(0),
        min_temp_(0) {
  }
  HV_TEMP(uint16_t _average_temp, uint16_t _max_temp, uint16_t _min_temp)
      : average_temp_(flatbuffers::EndianScalar(_average_temp)),
        max_temp_(flatbuffers::EndianScalar(_max_temp)),
        min_temp_(flatbuffers::EndianScalar(_min_temp)) {
  }
  uint16_t average_temp() const {
    return flatbuffers::EndianScalar(average_temp_);
  }
  uint16_t max_temp() const {
    return flatbuffers::EndianScalar(max_temp_);
  }
  uint16_t min_temp() const {
    return flatbuffers::EndianScalar(min_temp_);
  }
};
FLATBUFFERS_STRUCT_END(HV_TEMP, 6);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) HV_ERROR FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t error_code_;
  uint8_t error_index_;
  uint8_t active_;

 public:
  HV_ERROR()
      : error_code_(0),
        error_index_(0),
        active_(0) {
  }
  HV_ERROR(uint8_t _error_code, uint8_t _error_index, uint8_t _active)
      : error_code_(flatbuffers::EndianScalar(_error_code)),
        error_index_(flatbuffers::EndianScalar(_error_index)),
        active_(flatbuffers::EndianScalar(_active)) {
  }
  uint8_t error_code() const {
    return flatbuffers::EndianScalar(error_code_);
  }
  uint8_t error_index() const {
    return flatbuffers::EndianScalar(error_index_);
  }
  uint8_t active() const {
    return flatbuffers::EndianScalar(active_);
  }
};
FLATBUFFERS_STRUCT_END(HV_ERROR, 3);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) TS_STATUS_UPDATE FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t ts_status_;

 public:
  TS_STATUS_UPDATE()
      : ts_status_(0) {
  }
  TS_STATUS_UPDATE(Ts_Status _ts_status)
      : ts_status_(flatbuffers::EndianScalar(static_cast<int8_t>(_ts_status))) {
  }
  Ts_Status ts_status() const {
    return static_cast<Ts_Status>(flatbuffers::EndianScalar(ts_status_));
  }
};
FLATBUFFERS_STRUCT_END(TS_STATUS_UPDATE, 1);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) SET_TS_STATUS FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t ts_status_;

 public:
  SET_TS_STATUS()
      : ts_status_(0) {
  }
  SET_TS_STATUS(Ts_Status _ts_status)
      : ts_status_(flatbuffers::EndianScalar(static_cast<int8_t>(_ts_status))) {
  }
  Ts_Status ts_status() const {
    return static_cast<Ts_Status>(flatbuffers::EndianScalar(ts_status_));
  }
};
FLATBUFFERS_STRUCT_END(SET_TS_STATUS, 1);

#endif  // FLATBUFFERS_GENERATED_SCHEMA_H_
