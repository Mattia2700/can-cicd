#ifndef SCHEMA_READER_H
#define SCHEMA_READER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "../../../external/flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "../../../external/flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

typedef struct SET_PEDALS_RANGE SET_PEDALS_RANGE_t;
typedef const SET_PEDALS_RANGE_t *SET_PEDALS_RANGE_struct_t;
typedef SET_PEDALS_RANGE_t *SET_PEDALS_RANGE_mutable_struct_t;
typedef const SET_PEDALS_RANGE_t *SET_PEDALS_RANGE_vec_t;
typedef SET_PEDALS_RANGE_t *SET_PEDALS_RANGE_mutable_vec_t;
typedef struct ACCELERATOR_PEDAL_VAL ACCELERATOR_PEDAL_VAL_t;
typedef const ACCELERATOR_PEDAL_VAL_t *ACCELERATOR_PEDAL_VAL_struct_t;
typedef ACCELERATOR_PEDAL_VAL_t *ACCELERATOR_PEDAL_VAL_mutable_struct_t;
typedef const ACCELERATOR_PEDAL_VAL_t *ACCELERATOR_PEDAL_VAL_vec_t;
typedef ACCELERATOR_PEDAL_VAL_t *ACCELERATOR_PEDAL_VAL_mutable_vec_t;
typedef struct BRAKE_PEDAL_VAL BRAKE_PEDAL_VAL_t;
typedef const BRAKE_PEDAL_VAL_t *BRAKE_PEDAL_VAL_struct_t;
typedef BRAKE_PEDAL_VAL_t *BRAKE_PEDAL_VAL_mutable_struct_t;
typedef const BRAKE_PEDAL_VAL_t *BRAKE_PEDAL_VAL_vec_t;
typedef BRAKE_PEDAL_VAL_t *BRAKE_PEDAL_VAL_mutable_vec_t;

#ifndef SET_PEDALS_RANGE_file_identifier
#define SET_PEDALS_RANGE_file_identifier flatbuffers_identifier
#endif
/* deprecated, use SET_PEDALS_RANGE_file_identifier */
#ifndef SET_PEDALS_RANGE_identifier
#define SET_PEDALS_RANGE_identifier flatbuffers_identifier
#endif
#define SET_PEDALS_RANGE_type_hash ((flatbuffers_thash_t)0x530c2c7)
#define SET_PEDALS_RANGE_type_identifier "\xc7\xc2\x30\x05"
#ifndef ACCELERATOR_PEDAL_VAL_file_identifier
#define ACCELERATOR_PEDAL_VAL_file_identifier flatbuffers_identifier
#endif
/* deprecated, use ACCELERATOR_PEDAL_VAL_file_identifier */
#ifndef ACCELERATOR_PEDAL_VAL_identifier
#define ACCELERATOR_PEDAL_VAL_identifier flatbuffers_identifier
#endif
#define ACCELERATOR_PEDAL_VAL_type_hash ((flatbuffers_thash_t)0x6acd8f)
#define ACCELERATOR_PEDAL_VAL_type_identifier "\x8f\xcd\x6a\x00"
#ifndef BRAKE_PEDAL_VAL_file_identifier
#define BRAKE_PEDAL_VAL_file_identifier flatbuffers_identifier
#endif
/* deprecated, use BRAKE_PEDAL_VAL_file_identifier */
#ifndef BRAKE_PEDAL_VAL_identifier
#define BRAKE_PEDAL_VAL_identifier flatbuffers_identifier
#endif
#define BRAKE_PEDAL_VAL_type_hash ((flatbuffers_thash_t)0x3fc639a3)
#define BRAKE_PEDAL_VAL_type_identifier "\xa3\x39\xc6\x3f"

typedef int8_t Sync_State_enum_t;
__flatbuffers_define_integer_type(Sync_State, Sync_State_enum_t, 8)
#define Sync_State_MAX_START ((Sync_State_enum_t)INT8_C(0))
#define Sync_State_MAX_END ((Sync_State_enum_t)INT8_C(1))
#define Sync_State_MIN_START ((Sync_State_enum_t)INT8_C(2))
#define Sync_State_MIN_END ((Sync_State_enum_t)INT8_C(3))

static inline const char *Sync_State_name(Sync_State_enum_t value)
{
    switch (value) {
    case Sync_State_MAX_START: return "MAX_START";
    case Sync_State_MAX_END: return "MAX_END";
    case Sync_State_MIN_START: return "MIN_START";
    case Sync_State_MIN_END: return "MIN_END";
    default: return "";
    }
}

static inline int Sync_State_is_known_value(Sync_State_enum_t value)
{
    switch (value) {
    case Sync_State_MAX_START: return 1;
    case Sync_State_MAX_END: return 1;
    case Sync_State_MIN_START: return 1;
    case Sync_State_MIN_END: return 1;
    default: return 0;
    }
}

typedef int8_t Pedal_enum_t;
__flatbuffers_define_integer_type(Pedal, Pedal_enum_t, 8)
#define Pedal_ACCELERATOR ((Pedal_enum_t)INT8_C(0))
#define Pedal_BRAKE ((Pedal_enum_t)INT8_C(1))
#define Pedal_ALL ((Pedal_enum_t)INT8_C(2))

static inline const char *Pedal_name(Pedal_enum_t value)
{
    switch (value) {
    case Pedal_ACCELERATOR: return "ACCELERATOR";
    case Pedal_BRAKE: return "BRAKE";
    case Pedal_ALL: return "ALL";
    default: return "";
    }
}

static inline int Pedal_is_known_value(Pedal_enum_t value)
{
    switch (value) {
    case Pedal_ACCELERATOR: return 1;
    case Pedal_BRAKE: return 1;
    case Pedal_ALL: return 1;
    default: return 0;
    }
}


struct SET_PEDALS_RANGE {
    alignas(1) Sync_State_enum_t sync_state;
    alignas(1) Pedal_enum_t pedal;
};
static_assert(sizeof(SET_PEDALS_RANGE_t) == 2, "struct size mismatch");

static inline const SET_PEDALS_RANGE_t *SET_PEDALS_RANGE__const_ptr_add(const SET_PEDALS_RANGE_t *p, size_t i) { return p + i; }
static inline SET_PEDALS_RANGE_t *SET_PEDALS_RANGE__ptr_add(SET_PEDALS_RANGE_t *p, size_t i) { return p + i; }
static inline SET_PEDALS_RANGE_struct_t SET_PEDALS_RANGE_vec_at(SET_PEDALS_RANGE_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t SET_PEDALS_RANGE__size(void) { return 2; }
static inline size_t SET_PEDALS_RANGE_vec_len(SET_PEDALS_RANGE_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(SET_PEDALS_RANGE)

__flatbuffers_define_struct_scalar_field(SET_PEDALS_RANGE, sync_state, Sync_State, Sync_State_enum_t)
__flatbuffers_define_struct_scalar_field(SET_PEDALS_RANGE, pedal, Pedal, Pedal_enum_t)

struct ACCELERATOR_PEDAL_VAL {
    alignas(1) uint8_t level;
};
static_assert(sizeof(ACCELERATOR_PEDAL_VAL_t) == 1, "struct size mismatch");

static inline const ACCELERATOR_PEDAL_VAL_t *ACCELERATOR_PEDAL_VAL__const_ptr_add(const ACCELERATOR_PEDAL_VAL_t *p, size_t i) { return p + i; }
static inline ACCELERATOR_PEDAL_VAL_t *ACCELERATOR_PEDAL_VAL__ptr_add(ACCELERATOR_PEDAL_VAL_t *p, size_t i) { return p + i; }
static inline ACCELERATOR_PEDAL_VAL_struct_t ACCELERATOR_PEDAL_VAL_vec_at(ACCELERATOR_PEDAL_VAL_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t ACCELERATOR_PEDAL_VAL__size(void) { return 1; }
static inline size_t ACCELERATOR_PEDAL_VAL_vec_len(ACCELERATOR_PEDAL_VAL_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(ACCELERATOR_PEDAL_VAL)

__flatbuffers_define_struct_scalar_field(ACCELERATOR_PEDAL_VAL, level, flatbuffers_uint8, uint8_t)

struct BRAKE_PEDAL_VAL {
    alignas(1) uint8_t level;
};
static_assert(sizeof(BRAKE_PEDAL_VAL_t) == 1, "struct size mismatch");

static inline const BRAKE_PEDAL_VAL_t *BRAKE_PEDAL_VAL__const_ptr_add(const BRAKE_PEDAL_VAL_t *p, size_t i) { return p + i; }
static inline BRAKE_PEDAL_VAL_t *BRAKE_PEDAL_VAL__ptr_add(BRAKE_PEDAL_VAL_t *p, size_t i) { return p + i; }
static inline BRAKE_PEDAL_VAL_struct_t BRAKE_PEDAL_VAL_vec_at(BRAKE_PEDAL_VAL_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t BRAKE_PEDAL_VAL__size(void) { return 1; }
static inline size_t BRAKE_PEDAL_VAL_vec_len(BRAKE_PEDAL_VAL_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(BRAKE_PEDAL_VAL)

__flatbuffers_define_struct_scalar_field(BRAKE_PEDAL_VAL, level, flatbuffers_uint8, uint8_t)



#include "../../../external/flatcc/flatcc_epilogue.h"
#endif /* SCHEMA_READER_H */
