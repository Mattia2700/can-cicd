#ifndef SCHEMA_BUILDER_H
#define SCHEMA_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef SCHEMA_READER_H
#include "schema_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "../../../external/flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __Tlm_Status_formal_args , Tlm_Status_enum_t v0
#define __Tlm_Status_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Tlm_Status, Tlm_Status_enum_t)
#define __Race_Type_formal_args , Race_Type_enum_t v0
#define __Race_Type_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Race_Type, Race_Type_enum_t)
#define __Ts_Status_formal_args , Ts_Status_enum_t v0
#define __Ts_Status_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Ts_Status, Ts_Status_enum_t)
#define __Ts_Status_Set_formal_args , Ts_Status_Set_enum_t v0
#define __Ts_Status_Set_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Ts_Status_Set, Ts_Status_Set_enum_t)
#define __Traction_Control_formal_args , Traction_Control_enum_t v0
#define __Traction_Control_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Traction_Control, Traction_Control_enum_t)
#define __Map_formal_args , Map_enum_t v0
#define __Map_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Map, Map_enum_t)
#define __Car_Status_Set_formal_args , Car_Status_Set_enum_t v0
#define __Car_Status_Set_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Car_Status_Set, Car_Status_Set_enum_t)
#define __Car_Status_formal_args , Car_Status_enum_t v0
#define __Car_Status_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Car_Status, Car_Status_enum_t)
#define __Inverter_Status_formal_args , Inverter_Status_enum_t v0
#define __Inverter_Status_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Inverter_Status, Inverter_Status_enum_t)

#define __TLM_STATUS_formal_args , Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3
#define __TLM_STATUS_call_args , v0, v1, v2, v3
static inline TLM_STATUS_t *TLM_STATUS_assign(TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline TLM_STATUS_t *TLM_STATUS_copy(TLM_STATUS_t *p, const TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
static inline TLM_STATUS_t *TLM_STATUS_assign_to_pe(TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline TLM_STATUS_t *TLM_STATUS_copy_to_pe(TLM_STATUS_t *p, const TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
static inline TLM_STATUS_t *TLM_STATUS_assign_from_pe(TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline TLM_STATUS_t *TLM_STATUS_copy_from_pe(TLM_STATUS_t *p, const TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
__flatbuffers_build_struct(flatbuffers_, TLM_STATUS, 4, 1, TLM_STATUS_file_identifier, TLM_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, TLM_STATUS, TLM_STATUS_t)

#define __SET_TLM_STATUS_formal_args , Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3
#define __SET_TLM_STATUS_call_args , v0, v1, v2, v3
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_assign(SET_TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_copy(SET_TLM_STATUS_t *p, const SET_TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_assign_to_pe(SET_TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_copy_to_pe(SET_TLM_STATUS_t *p, const SET_TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_assign_from_pe(SET_TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_copy_from_pe(SET_TLM_STATUS_t *p, const SET_TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
__flatbuffers_build_struct(flatbuffers_, SET_TLM_STATUS, 4, 1, SET_TLM_STATUS_file_identifier, SET_TLM_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, SET_TLM_STATUS, SET_TLM_STATUS_t)

#define __HV_VOLTAGE_formal_args , uint16_t v0, uint16_t v1, uint16_t v2, uint16_t v3
#define __HV_VOLTAGE_call_args , v0, v1, v2, v3
static inline HV_VOLTAGE_t *HV_VOLTAGE_assign(HV_VOLTAGE_t *p, uint16_t v0, uint16_t v1, uint16_t v2, uint16_t v3)
{ p->pack_voltage = v0; p->bus_voltage = v1; p->max_cell_voltage = v2; p->min_cell_voltage = v3;
  return p; }
static inline HV_VOLTAGE_t *HV_VOLTAGE_copy(HV_VOLTAGE_t *p, const HV_VOLTAGE_t *p2)
{ p->pack_voltage = p2->pack_voltage; p->bus_voltage = p2->bus_voltage; p->max_cell_voltage = p2->max_cell_voltage; p->min_cell_voltage = p2->min_cell_voltage;
  return p; }
static inline HV_VOLTAGE_t *HV_VOLTAGE_assign_to_pe(HV_VOLTAGE_t *p, uint16_t v0, uint16_t v1, uint16_t v2, uint16_t v3)
{ flatbuffers_uint16_assign_to_pe(&p->pack_voltage, v0); flatbuffers_uint16_assign_to_pe(&p->bus_voltage, v1); flatbuffers_uint16_assign_to_pe(&p->max_cell_voltage, v2); flatbuffers_uint16_assign_to_pe(&p->min_cell_voltage, v3);
  return p; }
static inline HV_VOLTAGE_t *HV_VOLTAGE_copy_to_pe(HV_VOLTAGE_t *p, const HV_VOLTAGE_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->pack_voltage, &p2->pack_voltage); flatbuffers_uint16_copy_to_pe(&p->bus_voltage, &p2->bus_voltage); flatbuffers_uint16_copy_to_pe(&p->max_cell_voltage, &p2->max_cell_voltage); flatbuffers_uint16_copy_to_pe(&p->min_cell_voltage, &p2->min_cell_voltage);
  return p; }
static inline HV_VOLTAGE_t *HV_VOLTAGE_assign_from_pe(HV_VOLTAGE_t *p, uint16_t v0, uint16_t v1, uint16_t v2, uint16_t v3)
{ flatbuffers_uint16_assign_from_pe(&p->pack_voltage, v0); flatbuffers_uint16_assign_from_pe(&p->bus_voltage, v1); flatbuffers_uint16_assign_from_pe(&p->max_cell_voltage, v2); flatbuffers_uint16_assign_from_pe(&p->min_cell_voltage, v3);
  return p; }
static inline HV_VOLTAGE_t *HV_VOLTAGE_copy_from_pe(HV_VOLTAGE_t *p, const HV_VOLTAGE_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->pack_voltage, &p2->pack_voltage); flatbuffers_uint16_copy_from_pe(&p->bus_voltage, &p2->bus_voltage); flatbuffers_uint16_copy_from_pe(&p->max_cell_voltage, &p2->max_cell_voltage); flatbuffers_uint16_copy_from_pe(&p->min_cell_voltage, &p2->min_cell_voltage);
  return p; }
__flatbuffers_build_struct(flatbuffers_, HV_VOLTAGE, 8, 2, HV_VOLTAGE_file_identifier, HV_VOLTAGE_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, HV_VOLTAGE, HV_VOLTAGE_t)

#define __HV_CURRENT_formal_args , uint16_t v0, int8_t v1
#define __HV_CURRENT_call_args , v0, v1
static inline HV_CURRENT_t *HV_CURRENT_assign(HV_CURRENT_t *p, uint16_t v0, int8_t v1)
{ p->current = v0; p->power = v1;
  return p; }
static inline HV_CURRENT_t *HV_CURRENT_copy(HV_CURRENT_t *p, const HV_CURRENT_t *p2)
{ p->current = p2->current; p->power = p2->power;
  return p; }
static inline HV_CURRENT_t *HV_CURRENT_assign_to_pe(HV_CURRENT_t *p, uint16_t v0, int8_t v1)
{ flatbuffers_uint16_assign_to_pe(&p->current, v0); p->power = v1;
  return p; }
static inline HV_CURRENT_t *HV_CURRENT_copy_to_pe(HV_CURRENT_t *p, const HV_CURRENT_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->current, &p2->current); p->power = p2->power;
  return p; }
static inline HV_CURRENT_t *HV_CURRENT_assign_from_pe(HV_CURRENT_t *p, uint16_t v0, int8_t v1)
{ flatbuffers_uint16_assign_from_pe(&p->current, v0); p->power = v1;
  return p; }
static inline HV_CURRENT_t *HV_CURRENT_copy_from_pe(HV_CURRENT_t *p, const HV_CURRENT_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->current, &p2->current); p->power = p2->power;
  return p; }
__flatbuffers_build_struct(flatbuffers_, HV_CURRENT, 4, 2, HV_CURRENT_file_identifier, HV_CURRENT_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, HV_CURRENT, HV_CURRENT_t)

#define __HV_TEMP_formal_args , uint16_t v0, uint16_t v1, uint16_t v2
#define __HV_TEMP_call_args , v0, v1, v2
static inline HV_TEMP_t *HV_TEMP_assign(HV_TEMP_t *p, uint16_t v0, uint16_t v1, uint16_t v2)
{ p->average_temp = v0; p->max_temp = v1; p->min_temp = v2;
  return p; }
static inline HV_TEMP_t *HV_TEMP_copy(HV_TEMP_t *p, const HV_TEMP_t *p2)
{ p->average_temp = p2->average_temp; p->max_temp = p2->max_temp; p->min_temp = p2->min_temp;
  return p; }
static inline HV_TEMP_t *HV_TEMP_assign_to_pe(HV_TEMP_t *p, uint16_t v0, uint16_t v1, uint16_t v2)
{ flatbuffers_uint16_assign_to_pe(&p->average_temp, v0); flatbuffers_uint16_assign_to_pe(&p->max_temp, v1); flatbuffers_uint16_assign_to_pe(&p->min_temp, v2);
  return p; }
static inline HV_TEMP_t *HV_TEMP_copy_to_pe(HV_TEMP_t *p, const HV_TEMP_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->average_temp, &p2->average_temp); flatbuffers_uint16_copy_to_pe(&p->max_temp, &p2->max_temp); flatbuffers_uint16_copy_to_pe(&p->min_temp, &p2->min_temp);
  return p; }
static inline HV_TEMP_t *HV_TEMP_assign_from_pe(HV_TEMP_t *p, uint16_t v0, uint16_t v1, uint16_t v2)
{ flatbuffers_uint16_assign_from_pe(&p->average_temp, v0); flatbuffers_uint16_assign_from_pe(&p->max_temp, v1); flatbuffers_uint16_assign_from_pe(&p->min_temp, v2);
  return p; }
static inline HV_TEMP_t *HV_TEMP_copy_from_pe(HV_TEMP_t *p, const HV_TEMP_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->average_temp, &p2->average_temp); flatbuffers_uint16_copy_from_pe(&p->max_temp, &p2->max_temp); flatbuffers_uint16_copy_from_pe(&p->min_temp, &p2->min_temp);
  return p; }
__flatbuffers_build_struct(flatbuffers_, HV_TEMP, 6, 2, HV_TEMP_file_identifier, HV_TEMP_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, HV_TEMP, HV_TEMP_t)

#define __HV_ERROR_formal_args , uint8_t v0, uint8_t v1, uint8_t v2
#define __HV_ERROR_call_args , v0, v1, v2
static inline HV_ERROR_t *HV_ERROR_assign(HV_ERROR_t *p, uint8_t v0, uint8_t v1, uint8_t v2)
{ p->error_code = v0; p->error_index = v1; p->active = v2;
  return p; }
static inline HV_ERROR_t *HV_ERROR_copy(HV_ERROR_t *p, const HV_ERROR_t *p2)
{ p->error_code = p2->error_code; p->error_index = p2->error_index; p->active = p2->active;
  return p; }
static inline HV_ERROR_t *HV_ERROR_assign_to_pe(HV_ERROR_t *p, uint8_t v0, uint8_t v1, uint8_t v2)
{ p->error_code = v0; p->error_index = v1; p->active = v2;
  return p; }
static inline HV_ERROR_t *HV_ERROR_copy_to_pe(HV_ERROR_t *p, const HV_ERROR_t *p2)
{ p->error_code = p2->error_code; p->error_index = p2->error_index; p->active = p2->active;
  return p; }
static inline HV_ERROR_t *HV_ERROR_assign_from_pe(HV_ERROR_t *p, uint8_t v0, uint8_t v1, uint8_t v2)
{ p->error_code = v0; p->error_index = v1; p->active = v2;
  return p; }
static inline HV_ERROR_t *HV_ERROR_copy_from_pe(HV_ERROR_t *p, const HV_ERROR_t *p2)
{ p->error_code = p2->error_code; p->error_index = p2->error_index; p->active = p2->active;
  return p; }
__flatbuffers_build_struct(flatbuffers_, HV_ERROR, 3, 1, HV_ERROR_file_identifier, HV_ERROR_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, HV_ERROR, HV_ERROR_t)

#define __TS_STATUS_formal_args , Ts_Status_enum_t v0
#define __TS_STATUS_call_args , v0
static inline TS_STATUS_t *TS_STATUS_assign(TS_STATUS_t *p, Ts_Status_enum_t v0)
{ p->ts_status = v0;
  return p; }
static inline TS_STATUS_t *TS_STATUS_copy(TS_STATUS_t *p, const TS_STATUS_t *p2)
{ p->ts_status = p2->ts_status;
  return p; }
static inline TS_STATUS_t *TS_STATUS_assign_to_pe(TS_STATUS_t *p, Ts_Status_enum_t v0)
{ p->ts_status = v0;
  return p; }
static inline TS_STATUS_t *TS_STATUS_copy_to_pe(TS_STATUS_t *p, const TS_STATUS_t *p2)
{ p->ts_status = p2->ts_status;
  return p; }
static inline TS_STATUS_t *TS_STATUS_assign_from_pe(TS_STATUS_t *p, Ts_Status_enum_t v0)
{ p->ts_status = v0;
  return p; }
static inline TS_STATUS_t *TS_STATUS_copy_from_pe(TS_STATUS_t *p, const TS_STATUS_t *p2)
{ p->ts_status = p2->ts_status;
  return p; }
__flatbuffers_build_struct(flatbuffers_, TS_STATUS, 1, 1, TS_STATUS_file_identifier, TS_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, TS_STATUS, TS_STATUS_t)

#define __SET_TS_STATUS_formal_args , Ts_Status_Set_enum_t v0
#define __SET_TS_STATUS_call_args , v0
static inline SET_TS_STATUS_t *SET_TS_STATUS_assign(SET_TS_STATUS_t *p, Ts_Status_Set_enum_t v0)
{ p->ts_status_set = v0;
  return p; }
static inline SET_TS_STATUS_t *SET_TS_STATUS_copy(SET_TS_STATUS_t *p, const SET_TS_STATUS_t *p2)
{ p->ts_status_set = p2->ts_status_set;
  return p; }
static inline SET_TS_STATUS_t *SET_TS_STATUS_assign_to_pe(SET_TS_STATUS_t *p, Ts_Status_Set_enum_t v0)
{ p->ts_status_set = v0;
  return p; }
static inline SET_TS_STATUS_t *SET_TS_STATUS_copy_to_pe(SET_TS_STATUS_t *p, const SET_TS_STATUS_t *p2)
{ p->ts_status_set = p2->ts_status_set;
  return p; }
static inline SET_TS_STATUS_t *SET_TS_STATUS_assign_from_pe(SET_TS_STATUS_t *p, Ts_Status_Set_enum_t v0)
{ p->ts_status_set = v0;
  return p; }
static inline SET_TS_STATUS_t *SET_TS_STATUS_copy_from_pe(SET_TS_STATUS_t *p, const SET_TS_STATUS_t *p2)
{ p->ts_status_set = p2->ts_status_set;
  return p; }
__flatbuffers_build_struct(flatbuffers_, SET_TS_STATUS, 1, 1, SET_TS_STATUS_file_identifier, SET_TS_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, SET_TS_STATUS, SET_TS_STATUS_t)

#define __STEER_STATUS_formal_args , Traction_Control_enum_t v0, Map_enum_t v1, flatbuffers_bool_t v2
#define __STEER_STATUS_call_args , v0, v1, v2
static inline STEER_STATUS_t *STEER_STATUS_assign(STEER_STATUS_t *p, Traction_Control_enum_t v0, Map_enum_t v1, flatbuffers_bool_t v2)
{ p->traction_control = v0; p->map = v1; p->radio_on = v2;
  return p; }
static inline STEER_STATUS_t *STEER_STATUS_copy(STEER_STATUS_t *p, const STEER_STATUS_t *p2)
{ p->traction_control = p2->traction_control; p->map = p2->map; p->radio_on = p2->radio_on;
  return p; }
static inline STEER_STATUS_t *STEER_STATUS_assign_to_pe(STEER_STATUS_t *p, Traction_Control_enum_t v0, Map_enum_t v1, flatbuffers_bool_t v2)
{ p->traction_control = v0; p->map = v1; p->radio_on = v2;
  return p; }
static inline STEER_STATUS_t *STEER_STATUS_copy_to_pe(STEER_STATUS_t *p, const STEER_STATUS_t *p2)
{ p->traction_control = p2->traction_control; p->map = p2->map; p->radio_on = p2->radio_on;
  return p; }
static inline STEER_STATUS_t *STEER_STATUS_assign_from_pe(STEER_STATUS_t *p, Traction_Control_enum_t v0, Map_enum_t v1, flatbuffers_bool_t v2)
{ p->traction_control = v0; p->map = v1; p->radio_on = v2;
  return p; }
static inline STEER_STATUS_t *STEER_STATUS_copy_from_pe(STEER_STATUS_t *p, const STEER_STATUS_t *p2)
{ p->traction_control = p2->traction_control; p->map = p2->map; p->radio_on = p2->radio_on;
  return p; }
__flatbuffers_build_struct(flatbuffers_, STEER_STATUS, 3, 1, STEER_STATUS_file_identifier, STEER_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, STEER_STATUS, STEER_STATUS_t)

#define __SET_CAR_STATUS_formal_args , Car_Status_Set_enum_t v0
#define __SET_CAR_STATUS_call_args , v0
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_assign(SET_CAR_STATUS_t *p, Car_Status_Set_enum_t v0)
{ p->car_status_set = v0;
  return p; }
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_copy(SET_CAR_STATUS_t *p, const SET_CAR_STATUS_t *p2)
{ p->car_status_set = p2->car_status_set;
  return p; }
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_assign_to_pe(SET_CAR_STATUS_t *p, Car_Status_Set_enum_t v0)
{ p->car_status_set = v0;
  return p; }
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_copy_to_pe(SET_CAR_STATUS_t *p, const SET_CAR_STATUS_t *p2)
{ p->car_status_set = p2->car_status_set;
  return p; }
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_assign_from_pe(SET_CAR_STATUS_t *p, Car_Status_Set_enum_t v0)
{ p->car_status_set = v0;
  return p; }
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_copy_from_pe(SET_CAR_STATUS_t *p, const SET_CAR_STATUS_t *p2)
{ p->car_status_set = p2->car_status_set;
  return p; }
__flatbuffers_build_struct(flatbuffers_, SET_CAR_STATUS, 1, 1, SET_CAR_STATUS_file_identifier, SET_CAR_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, SET_CAR_STATUS, SET_CAR_STATUS_t)

#define __CAR_STATUS_formal_args , Car_Status_enum_t v0, Inverter_Status_enum_t v1, Inverter_Status_enum_t v2
#define __CAR_STATUS_call_args , v0, v1, v2
static inline CAR_STATUS_t *CAR_STATUS_assign(CAR_STATUS_t *p, Car_Status_enum_t v0, Inverter_Status_enum_t v1, Inverter_Status_enum_t v2)
{ p->car_status = v0; p->inverter_l = v1; p->inverter_r = v2;
  return p; }
static inline CAR_STATUS_t *CAR_STATUS_copy(CAR_STATUS_t *p, const CAR_STATUS_t *p2)
{ p->car_status = p2->car_status; p->inverter_l = p2->inverter_l; p->inverter_r = p2->inverter_r;
  return p; }
static inline CAR_STATUS_t *CAR_STATUS_assign_to_pe(CAR_STATUS_t *p, Car_Status_enum_t v0, Inverter_Status_enum_t v1, Inverter_Status_enum_t v2)
{ p->car_status = v0; p->inverter_l = v1; p->inverter_r = v2;
  return p; }
static inline CAR_STATUS_t *CAR_STATUS_copy_to_pe(CAR_STATUS_t *p, const CAR_STATUS_t *p2)
{ p->car_status = p2->car_status; p->inverter_l = p2->inverter_l; p->inverter_r = p2->inverter_r;
  return p; }
static inline CAR_STATUS_t *CAR_STATUS_assign_from_pe(CAR_STATUS_t *p, Car_Status_enum_t v0, Inverter_Status_enum_t v1, Inverter_Status_enum_t v2)
{ p->car_status = v0; p->inverter_l = v1; p->inverter_r = v2;
  return p; }
static inline CAR_STATUS_t *CAR_STATUS_copy_from_pe(CAR_STATUS_t *p, const CAR_STATUS_t *p2)
{ p->car_status = p2->car_status; p->inverter_l = p2->inverter_l; p->inverter_r = p2->inverter_r;
  return p; }
__flatbuffers_build_struct(flatbuffers_, CAR_STATUS, 3, 1, CAR_STATUS_file_identifier, CAR_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, CAR_STATUS, CAR_STATUS_t)

#include "../../../external/flatcc/flatcc_epilogue.h"
#endif /* SCHEMA_BUILDER_H */
