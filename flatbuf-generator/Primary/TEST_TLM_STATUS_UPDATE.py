# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TEST_TLM_STATUS_UPDATE(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 4

    # TEST_TLM_STATUS_UPDATE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TEST_TLM_STATUS_UPDATE
    def TlmStatus(self): return self._tab.Get(flatbuffers.number_types.Int8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # TEST_TLM_STATUS_UPDATE
    def RaceType(self): return self._tab.Get(flatbuffers.number_types.Int8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(1))
    # TEST_TLM_STATUS_UPDATE
    def Driver(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))
    # TEST_TLM_STATUS_UPDATE
    def Circuit(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(3))

def CreateTEST_TLM_STATUS_UPDATE(builder, tlmStatus, raceType, driver, circuit):
    builder.Prep(1, 4)
    builder.PrependUint8(circuit)
    builder.PrependUint8(driver)
    builder.PrependInt8(raceType)
    builder.PrependInt8(tlmStatus)
    return builder.Offset()
