from enum import Enum
from struct import pack, unpack
from collections import namedtuple

{%- for enum in enums %}


class {{ enum["name"] }}(Enum):
    {%- for item_name, item_value in enum["items"] %}
    {{ item_name }} = {{ item_value }}
    {%- endfor %}

{%- endfor %}
{% for struct in structs -%}
{% set struct_name = struct["name"] %}
{% set endianness_prefix = "<" if endianness == "little" else ">" %}
# {{ struct_name }}
class {{ struct_name }}:
    {% set parameters = ", ".join(fill_padding(struct["items"].keys())) -%}
    tuple = namedtuple("{{ struct_name }}", "{{ parameters.replace("0x00, ", "") }}", rename=True)
    schema = "{{ endianness_prefix }}{{ format_string(struct["items"]) }}"
    
    @staticmethod
    def serialize({{ parameters.replace("0x00, ", "") }}) -> bytes:
        return pack({{ struct_name }}.schema, {{ parameters }})
    
    @staticmethod
    def deserialize(buffer: bytes) -> "{{ struct_name }}":
        return {{ struct_name }}.tuple._make(unpack({{ struct_name }}.schema, buffer))
{% endfor -%}