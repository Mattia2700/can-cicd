#ifndef SCHEMA_BUILDER_H
#define SCHEMA_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef SCHEMA_READER_H
#include "schema_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "../../../external/flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __Tlm_Status_formal_args , Tlm_Status_enum_t v0
#define __Tlm_Status_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Tlm_Status, Tlm_Status_enum_t)
#define __Race_Type_formal_args , Race_Type_enum_t v0
#define __Race_Type_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Race_Type, Race_Type_enum_t)
#define __Ts_Status_formal_args , Ts_Status_enum_t v0
#define __Ts_Status_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Ts_Status, Ts_Status_enum_t)
#define __Ts_Status_Set_formal_args , Ts_Status_Set_enum_t v0
#define __Ts_Status_Set_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Ts_Status_Set, Ts_Status_Set_enum_t)
#define __Traction_Control_formal_args , Traction_Control_enum_t v0
#define __Traction_Control_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Traction_Control, Traction_Control_enum_t)
#define __Map_formal_args , Map_enum_t v0
#define __Map_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Map, Map_enum_t)
#define __Car_Status_Set_formal_args , Car_Status_Set_enum_t v0
#define __Car_Status_Set_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Car_Status_Set, Car_Status_Set_enum_t)
#define __Car_Status_formal_args , Car_Status_enum_t v0
#define __Car_Status_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Car_Status, Car_Status_enum_t)
#define __Inverter_Status_formal_args , Inverter_Status_enum_t v0
#define __Inverter_Status_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Inverter_Status, Inverter_Status_enum_t)
#define __Status_formal_args , Status_enum_t v0
#define __Status_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Status, Status_enum_t)

#define __TIMESTAMP_formal_args , uint32_t v0
#define __TIMESTAMP_call_args , v0
static inline TIMESTAMP_t *TIMESTAMP_assign(TIMESTAMP_t *p, uint32_t v0)
{ p->timestamp = v0;
  return p; }
static inline TIMESTAMP_t *TIMESTAMP_copy(TIMESTAMP_t *p, const TIMESTAMP_t *p2)
{ p->timestamp = p2->timestamp;
  return p; }
static inline TIMESTAMP_t *TIMESTAMP_assign_to_pe(TIMESTAMP_t *p, uint32_t v0)
{ flatbuffers_uint32_assign_to_pe(&p->timestamp, v0);
  return p; }
static inline TIMESTAMP_t *TIMESTAMP_copy_to_pe(TIMESTAMP_t *p, const TIMESTAMP_t *p2)
{ flatbuffers_uint32_copy_to_pe(&p->timestamp, &p2->timestamp);
  return p; }
static inline TIMESTAMP_t *TIMESTAMP_assign_from_pe(TIMESTAMP_t *p, uint32_t v0)
{ flatbuffers_uint32_assign_from_pe(&p->timestamp, v0);
  return p; }
static inline TIMESTAMP_t *TIMESTAMP_copy_from_pe(TIMESTAMP_t *p, const TIMESTAMP_t *p2)
{ flatbuffers_uint32_copy_from_pe(&p->timestamp, &p2->timestamp);
  return p; }
__flatbuffers_build_struct(flatbuffers_, TIMESTAMP, 4, 4, TIMESTAMP_file_identifier, TIMESTAMP_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, TIMESTAMP, TIMESTAMP_t)

#define __TLM_STATUS_formal_args , Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3
#define __TLM_STATUS_call_args , v0, v1, v2, v3
static inline TLM_STATUS_t *TLM_STATUS_assign(TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline TLM_STATUS_t *TLM_STATUS_copy(TLM_STATUS_t *p, const TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
static inline TLM_STATUS_t *TLM_STATUS_assign_to_pe(TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline TLM_STATUS_t *TLM_STATUS_copy_to_pe(TLM_STATUS_t *p, const TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
static inline TLM_STATUS_t *TLM_STATUS_assign_from_pe(TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline TLM_STATUS_t *TLM_STATUS_copy_from_pe(TLM_STATUS_t *p, const TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
__flatbuffers_build_struct(flatbuffers_, TLM_STATUS, 4, 1, TLM_STATUS_file_identifier, TLM_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, TLM_STATUS, TLM_STATUS_t)

#define __SET_TLM_STATUS_formal_args , Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3
#define __SET_TLM_STATUS_call_args , v0, v1, v2, v3
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_assign(SET_TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_copy(SET_TLM_STATUS_t *p, const SET_TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_assign_to_pe(SET_TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_copy_to_pe(SET_TLM_STATUS_t *p, const SET_TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_assign_from_pe(SET_TLM_STATUS_t *p, Tlm_Status_enum_t v0, Race_Type_enum_t v1, uint8_t v2, uint8_t v3)
{ p->tlm_status = v0; p->race_type = v1; p->driver = v2; p->circuit = v3;
  return p; }
static inline SET_TLM_STATUS_t *SET_TLM_STATUS_copy_from_pe(SET_TLM_STATUS_t *p, const SET_TLM_STATUS_t *p2)
{ p->tlm_status = p2->tlm_status; p->race_type = p2->race_type; p->driver = p2->driver; p->circuit = p2->circuit;
  return p; }
__flatbuffers_build_struct(flatbuffers_, SET_TLM_STATUS, 4, 1, SET_TLM_STATUS_file_identifier, SET_TLM_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, SET_TLM_STATUS, SET_TLM_STATUS_t)

#define __HV_VOLTAGE_formal_args , uint16_t v0, uint16_t v1, uint16_t v2, uint16_t v3
#define __HV_VOLTAGE_call_args , v0, v1, v2, v3
static inline HV_VOLTAGE_t *HV_VOLTAGE_assign(HV_VOLTAGE_t *p, uint16_t v0, uint16_t v1, uint16_t v2, uint16_t v3)
{ p->pack_voltage = v0; p->bus_voltage = v1; p->max_cell_voltage = v2; p->min_cell_voltage = v3;
  return p; }
static inline HV_VOLTAGE_t *HV_VOLTAGE_copy(HV_VOLTAGE_t *p, const HV_VOLTAGE_t *p2)
{ p->pack_voltage = p2->pack_voltage; p->bus_voltage = p2->bus_voltage; p->max_cell_voltage = p2->max_cell_voltage; p->min_cell_voltage = p2->min_cell_voltage;
  return p; }
static inline HV_VOLTAGE_t *HV_VOLTAGE_assign_to_pe(HV_VOLTAGE_t *p, uint16_t v0, uint16_t v1, uint16_t v2, uint16_t v3)
{ flatbuffers_uint16_assign_to_pe(&p->pack_voltage, v0); flatbuffers_uint16_assign_to_pe(&p->bus_voltage, v1); flatbuffers_uint16_assign_to_pe(&p->max_cell_voltage, v2); flatbuffers_uint16_assign_to_pe(&p->min_cell_voltage, v3);
  return p; }
static inline HV_VOLTAGE_t *HV_VOLTAGE_copy_to_pe(HV_VOLTAGE_t *p, const HV_VOLTAGE_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->pack_voltage, &p2->pack_voltage); flatbuffers_uint16_copy_to_pe(&p->bus_voltage, &p2->bus_voltage); flatbuffers_uint16_copy_to_pe(&p->max_cell_voltage, &p2->max_cell_voltage); flatbuffers_uint16_copy_to_pe(&p->min_cell_voltage, &p2->min_cell_voltage);
  return p; }
static inline HV_VOLTAGE_t *HV_VOLTAGE_assign_from_pe(HV_VOLTAGE_t *p, uint16_t v0, uint16_t v1, uint16_t v2, uint16_t v3)
{ flatbuffers_uint16_assign_from_pe(&p->pack_voltage, v0); flatbuffers_uint16_assign_from_pe(&p->bus_voltage, v1); flatbuffers_uint16_assign_from_pe(&p->max_cell_voltage, v2); flatbuffers_uint16_assign_from_pe(&p->min_cell_voltage, v3);
  return p; }
static inline HV_VOLTAGE_t *HV_VOLTAGE_copy_from_pe(HV_VOLTAGE_t *p, const HV_VOLTAGE_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->pack_voltage, &p2->pack_voltage); flatbuffers_uint16_copy_from_pe(&p->bus_voltage, &p2->bus_voltage); flatbuffers_uint16_copy_from_pe(&p->max_cell_voltage, &p2->max_cell_voltage); flatbuffers_uint16_copy_from_pe(&p->min_cell_voltage, &p2->min_cell_voltage);
  return p; }
__flatbuffers_build_struct(flatbuffers_, HV_VOLTAGE, 8, 2, HV_VOLTAGE_file_identifier, HV_VOLTAGE_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, HV_VOLTAGE, HV_VOLTAGE_t)

#define __HV_CURRENT_formal_args , uint16_t v0, int16_t v1
#define __HV_CURRENT_call_args , v0, v1
static inline HV_CURRENT_t *HV_CURRENT_assign(HV_CURRENT_t *p, uint16_t v0, int16_t v1)
{ p->current = v0; p->power = v1;
  return p; }
static inline HV_CURRENT_t *HV_CURRENT_copy(HV_CURRENT_t *p, const HV_CURRENT_t *p2)
{ p->current = p2->current; p->power = p2->power;
  return p; }
static inline HV_CURRENT_t *HV_CURRENT_assign_to_pe(HV_CURRENT_t *p, uint16_t v0, int16_t v1)
{ flatbuffers_uint16_assign_to_pe(&p->current, v0); flatbuffers_int16_assign_to_pe(&p->power, v1);
  return p; }
static inline HV_CURRENT_t *HV_CURRENT_copy_to_pe(HV_CURRENT_t *p, const HV_CURRENT_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->current, &p2->current); flatbuffers_int16_copy_to_pe(&p->power, &p2->power);
  return p; }
static inline HV_CURRENT_t *HV_CURRENT_assign_from_pe(HV_CURRENT_t *p, uint16_t v0, int16_t v1)
{ flatbuffers_uint16_assign_from_pe(&p->current, v0); flatbuffers_int16_assign_from_pe(&p->power, v1);
  return p; }
static inline HV_CURRENT_t *HV_CURRENT_copy_from_pe(HV_CURRENT_t *p, const HV_CURRENT_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->current, &p2->current); flatbuffers_int16_copy_from_pe(&p->power, &p2->power);
  return p; }
__flatbuffers_build_struct(flatbuffers_, HV_CURRENT, 4, 2, HV_CURRENT_file_identifier, HV_CURRENT_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, HV_CURRENT, HV_CURRENT_t)

#define __HV_TEMP_formal_args , uint16_t v0, uint16_t v1, uint16_t v2
#define __HV_TEMP_call_args , v0, v1, v2
static inline HV_TEMP_t *HV_TEMP_assign(HV_TEMP_t *p, uint16_t v0, uint16_t v1, uint16_t v2)
{ p->average_temp = v0; p->max_temp = v1; p->min_temp = v2;
  return p; }
static inline HV_TEMP_t *HV_TEMP_copy(HV_TEMP_t *p, const HV_TEMP_t *p2)
{ p->average_temp = p2->average_temp; p->max_temp = p2->max_temp; p->min_temp = p2->min_temp;
  return p; }
static inline HV_TEMP_t *HV_TEMP_assign_to_pe(HV_TEMP_t *p, uint16_t v0, uint16_t v1, uint16_t v2)
{ flatbuffers_uint16_assign_to_pe(&p->average_temp, v0); flatbuffers_uint16_assign_to_pe(&p->max_temp, v1); flatbuffers_uint16_assign_to_pe(&p->min_temp, v2);
  return p; }
static inline HV_TEMP_t *HV_TEMP_copy_to_pe(HV_TEMP_t *p, const HV_TEMP_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->average_temp, &p2->average_temp); flatbuffers_uint16_copy_to_pe(&p->max_temp, &p2->max_temp); flatbuffers_uint16_copy_to_pe(&p->min_temp, &p2->min_temp);
  return p; }
static inline HV_TEMP_t *HV_TEMP_assign_from_pe(HV_TEMP_t *p, uint16_t v0, uint16_t v1, uint16_t v2)
{ flatbuffers_uint16_assign_from_pe(&p->average_temp, v0); flatbuffers_uint16_assign_from_pe(&p->max_temp, v1); flatbuffers_uint16_assign_from_pe(&p->min_temp, v2);
  return p; }
static inline HV_TEMP_t *HV_TEMP_copy_from_pe(HV_TEMP_t *p, const HV_TEMP_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->average_temp, &p2->average_temp); flatbuffers_uint16_copy_from_pe(&p->max_temp, &p2->max_temp); flatbuffers_uint16_copy_from_pe(&p->min_temp, &p2->min_temp);
  return p; }
__flatbuffers_build_struct(flatbuffers_, HV_TEMP, 6, 2, HV_TEMP_file_identifier, HV_TEMP_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, HV_TEMP, HV_TEMP_t)

#define __HV_ERROR_formal_args , uint8_t v0, uint8_t v1, uint8_t v2
#define __HV_ERROR_call_args , v0, v1, v2
static inline HV_ERROR_t *HV_ERROR_assign(HV_ERROR_t *p, uint8_t v0, uint8_t v1, uint8_t v2)
{ p->error_code = v0; p->error_index = v1; p->active = v2;
  return p; }
static inline HV_ERROR_t *HV_ERROR_copy(HV_ERROR_t *p, const HV_ERROR_t *p2)
{ p->error_code = p2->error_code; p->error_index = p2->error_index; p->active = p2->active;
  return p; }
static inline HV_ERROR_t *HV_ERROR_assign_to_pe(HV_ERROR_t *p, uint8_t v0, uint8_t v1, uint8_t v2)
{ p->error_code = v0; p->error_index = v1; p->active = v2;
  return p; }
static inline HV_ERROR_t *HV_ERROR_copy_to_pe(HV_ERROR_t *p, const HV_ERROR_t *p2)
{ p->error_code = p2->error_code; p->error_index = p2->error_index; p->active = p2->active;
  return p; }
static inline HV_ERROR_t *HV_ERROR_assign_from_pe(HV_ERROR_t *p, uint8_t v0, uint8_t v1, uint8_t v2)
{ p->error_code = v0; p->error_index = v1; p->active = v2;
  return p; }
static inline HV_ERROR_t *HV_ERROR_copy_from_pe(HV_ERROR_t *p, const HV_ERROR_t *p2)
{ p->error_code = p2->error_code; p->error_index = p2->error_index; p->active = p2->active;
  return p; }
__flatbuffers_build_struct(flatbuffers_, HV_ERROR, 3, 1, HV_ERROR_file_identifier, HV_ERROR_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, HV_ERROR, HV_ERROR_t)

#define __TS_STATUS_formal_args , Ts_Status_enum_t v0
#define __TS_STATUS_call_args , v0
static inline TS_STATUS_t *TS_STATUS_assign(TS_STATUS_t *p, Ts_Status_enum_t v0)
{ p->ts_status = v0;
  return p; }
static inline TS_STATUS_t *TS_STATUS_copy(TS_STATUS_t *p, const TS_STATUS_t *p2)
{ p->ts_status = p2->ts_status;
  return p; }
static inline TS_STATUS_t *TS_STATUS_assign_to_pe(TS_STATUS_t *p, Ts_Status_enum_t v0)
{ p->ts_status = v0;
  return p; }
static inline TS_STATUS_t *TS_STATUS_copy_to_pe(TS_STATUS_t *p, const TS_STATUS_t *p2)
{ p->ts_status = p2->ts_status;
  return p; }
static inline TS_STATUS_t *TS_STATUS_assign_from_pe(TS_STATUS_t *p, Ts_Status_enum_t v0)
{ p->ts_status = v0;
  return p; }
static inline TS_STATUS_t *TS_STATUS_copy_from_pe(TS_STATUS_t *p, const TS_STATUS_t *p2)
{ p->ts_status = p2->ts_status;
  return p; }
__flatbuffers_build_struct(flatbuffers_, TS_STATUS, 1, 1, TS_STATUS_file_identifier, TS_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, TS_STATUS, TS_STATUS_t)

#define __SET_TS_STATUS_formal_args , Ts_Status_Set_enum_t v0
#define __SET_TS_STATUS_call_args , v0
static inline SET_TS_STATUS_t *SET_TS_STATUS_assign(SET_TS_STATUS_t *p, Ts_Status_Set_enum_t v0)
{ p->ts_status_set = v0;
  return p; }
static inline SET_TS_STATUS_t *SET_TS_STATUS_copy(SET_TS_STATUS_t *p, const SET_TS_STATUS_t *p2)
{ p->ts_status_set = p2->ts_status_set;
  return p; }
static inline SET_TS_STATUS_t *SET_TS_STATUS_assign_to_pe(SET_TS_STATUS_t *p, Ts_Status_Set_enum_t v0)
{ p->ts_status_set = v0;
  return p; }
static inline SET_TS_STATUS_t *SET_TS_STATUS_copy_to_pe(SET_TS_STATUS_t *p, const SET_TS_STATUS_t *p2)
{ p->ts_status_set = p2->ts_status_set;
  return p; }
static inline SET_TS_STATUS_t *SET_TS_STATUS_assign_from_pe(SET_TS_STATUS_t *p, Ts_Status_Set_enum_t v0)
{ p->ts_status_set = v0;
  return p; }
static inline SET_TS_STATUS_t *SET_TS_STATUS_copy_from_pe(SET_TS_STATUS_t *p, const SET_TS_STATUS_t *p2)
{ p->ts_status_set = p2->ts_status_set;
  return p; }
__flatbuffers_build_struct(flatbuffers_, SET_TS_STATUS, 1, 1, SET_TS_STATUS_file_identifier, SET_TS_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, SET_TS_STATUS, SET_TS_STATUS_t)

#define __STEER_STATUS_formal_args , Traction_Control_enum_t v0, Map_enum_t v1, flatbuffers_bool_t v2
#define __STEER_STATUS_call_args , v0, v1, v2
static inline STEER_STATUS_t *STEER_STATUS_assign(STEER_STATUS_t *p, Traction_Control_enum_t v0, Map_enum_t v1, flatbuffers_bool_t v2)
{ p->traction_control = v0; p->map = v1; p->radio_on = v2;
  return p; }
static inline STEER_STATUS_t *STEER_STATUS_copy(STEER_STATUS_t *p, const STEER_STATUS_t *p2)
{ p->traction_control = p2->traction_control; p->map = p2->map; p->radio_on = p2->radio_on;
  return p; }
static inline STEER_STATUS_t *STEER_STATUS_assign_to_pe(STEER_STATUS_t *p, Traction_Control_enum_t v0, Map_enum_t v1, flatbuffers_bool_t v2)
{ p->traction_control = v0; p->map = v1; p->radio_on = v2;
  return p; }
static inline STEER_STATUS_t *STEER_STATUS_copy_to_pe(STEER_STATUS_t *p, const STEER_STATUS_t *p2)
{ p->traction_control = p2->traction_control; p->map = p2->map; p->radio_on = p2->radio_on;
  return p; }
static inline STEER_STATUS_t *STEER_STATUS_assign_from_pe(STEER_STATUS_t *p, Traction_Control_enum_t v0, Map_enum_t v1, flatbuffers_bool_t v2)
{ p->traction_control = v0; p->map = v1; p->radio_on = v2;
  return p; }
static inline STEER_STATUS_t *STEER_STATUS_copy_from_pe(STEER_STATUS_t *p, const STEER_STATUS_t *p2)
{ p->traction_control = p2->traction_control; p->map = p2->map; p->radio_on = p2->radio_on;
  return p; }
__flatbuffers_build_struct(flatbuffers_, STEER_STATUS, 3, 1, STEER_STATUS_file_identifier, STEER_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, STEER_STATUS, STEER_STATUS_t)

#define __SET_CAR_STATUS_formal_args , Car_Status_Set_enum_t v0
#define __SET_CAR_STATUS_call_args , v0
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_assign(SET_CAR_STATUS_t *p, Car_Status_Set_enum_t v0)
{ p->car_status_set = v0;
  return p; }
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_copy(SET_CAR_STATUS_t *p, const SET_CAR_STATUS_t *p2)
{ p->car_status_set = p2->car_status_set;
  return p; }
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_assign_to_pe(SET_CAR_STATUS_t *p, Car_Status_Set_enum_t v0)
{ p->car_status_set = v0;
  return p; }
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_copy_to_pe(SET_CAR_STATUS_t *p, const SET_CAR_STATUS_t *p2)
{ p->car_status_set = p2->car_status_set;
  return p; }
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_assign_from_pe(SET_CAR_STATUS_t *p, Car_Status_Set_enum_t v0)
{ p->car_status_set = v0;
  return p; }
static inline SET_CAR_STATUS_t *SET_CAR_STATUS_copy_from_pe(SET_CAR_STATUS_t *p, const SET_CAR_STATUS_t *p2)
{ p->car_status_set = p2->car_status_set;
  return p; }
__flatbuffers_build_struct(flatbuffers_, SET_CAR_STATUS, 1, 1, SET_CAR_STATUS_file_identifier, SET_CAR_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, SET_CAR_STATUS, SET_CAR_STATUS_t)

#define __CAR_STATUS_formal_args , Car_Status_enum_t v0, Inverter_Status_enum_t v1, Inverter_Status_enum_t v2
#define __CAR_STATUS_call_args , v0, v1, v2
static inline CAR_STATUS_t *CAR_STATUS_assign(CAR_STATUS_t *p, Car_Status_enum_t v0, Inverter_Status_enum_t v1, Inverter_Status_enum_t v2)
{ p->car_status = v0; p->inverter_l = v1; p->inverter_r = v2;
  return p; }
static inline CAR_STATUS_t *CAR_STATUS_copy(CAR_STATUS_t *p, const CAR_STATUS_t *p2)
{ p->car_status = p2->car_status; p->inverter_l = p2->inverter_l; p->inverter_r = p2->inverter_r;
  return p; }
static inline CAR_STATUS_t *CAR_STATUS_assign_to_pe(CAR_STATUS_t *p, Car_Status_enum_t v0, Inverter_Status_enum_t v1, Inverter_Status_enum_t v2)
{ p->car_status = v0; p->inverter_l = v1; p->inverter_r = v2;
  return p; }
static inline CAR_STATUS_t *CAR_STATUS_copy_to_pe(CAR_STATUS_t *p, const CAR_STATUS_t *p2)
{ p->car_status = p2->car_status; p->inverter_l = p2->inverter_l; p->inverter_r = p2->inverter_r;
  return p; }
static inline CAR_STATUS_t *CAR_STATUS_assign_from_pe(CAR_STATUS_t *p, Car_Status_enum_t v0, Inverter_Status_enum_t v1, Inverter_Status_enum_t v2)
{ p->car_status = v0; p->inverter_l = v1; p->inverter_r = v2;
  return p; }
static inline CAR_STATUS_t *CAR_STATUS_copy_from_pe(CAR_STATUS_t *p, const CAR_STATUS_t *p2)
{ p->car_status = p2->car_status; p->inverter_l = p2->inverter_l; p->inverter_r = p2->inverter_r;
  return p; }
__flatbuffers_build_struct(flatbuffers_, CAR_STATUS, 3, 1, CAR_STATUS_file_identifier, CAR_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, CAR_STATUS, CAR_STATUS_t)

#define __LV_CURRENT_formal_args , uint8_t v0
#define __LV_CURRENT_call_args , v0
static inline LV_CURRENT_t *LV_CURRENT_assign(LV_CURRENT_t *p, uint8_t v0)
{ p->current = v0;
  return p; }
static inline LV_CURRENT_t *LV_CURRENT_copy(LV_CURRENT_t *p, const LV_CURRENT_t *p2)
{ p->current = p2->current;
  return p; }
static inline LV_CURRENT_t *LV_CURRENT_assign_to_pe(LV_CURRENT_t *p, uint8_t v0)
{ p->current = v0;
  return p; }
static inline LV_CURRENT_t *LV_CURRENT_copy_to_pe(LV_CURRENT_t *p, const LV_CURRENT_t *p2)
{ p->current = p2->current;
  return p; }
static inline LV_CURRENT_t *LV_CURRENT_assign_from_pe(LV_CURRENT_t *p, uint8_t v0)
{ p->current = v0;
  return p; }
static inline LV_CURRENT_t *LV_CURRENT_copy_from_pe(LV_CURRENT_t *p, const LV_CURRENT_t *p2)
{ p->current = p2->current;
  return p; }
__flatbuffers_build_struct(flatbuffers_, LV_CURRENT, 1, 1, LV_CURRENT_file_identifier, LV_CURRENT_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, LV_CURRENT, LV_CURRENT_t)

#define __LV_VOLTAGE_formal_args ,\
  uint16_t v0, uint8_t v1, uint8_t v2, uint8_t v3, uint8_t v4
#define __LV_VOLTAGE_call_args ,\
  v0, v1, v2, v3, v4
static inline LV_VOLTAGE_t *LV_VOLTAGE_assign(LV_VOLTAGE_t *p,
  uint16_t v0, uint8_t v1, uint8_t v2, uint8_t v3, uint8_t v4)
{ p->total_voltage = v0; p->voltage_1 = v1; p->voltage_2 = v2; p->voltage_3 = v3;
  p->voltage_4 = v4;
  return p; }
static inline LV_VOLTAGE_t *LV_VOLTAGE_copy(LV_VOLTAGE_t *p, const LV_VOLTAGE_t *p2)
{ p->total_voltage = p2->total_voltage; p->voltage_1 = p2->voltage_1; p->voltage_2 = p2->voltage_2; p->voltage_3 = p2->voltage_3;
  p->voltage_4 = p2->voltage_4;
  return p; }
static inline LV_VOLTAGE_t *LV_VOLTAGE_assign_to_pe(LV_VOLTAGE_t *p,
  uint16_t v0, uint8_t v1, uint8_t v2, uint8_t v3, uint8_t v4)
{ flatbuffers_uint16_assign_to_pe(&p->total_voltage, v0); p->voltage_1 = v1; p->voltage_2 = v2; p->voltage_3 = v3;
  p->voltage_4 = v4;
  return p; }
static inline LV_VOLTAGE_t *LV_VOLTAGE_copy_to_pe(LV_VOLTAGE_t *p, const LV_VOLTAGE_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->total_voltage, &p2->total_voltage); p->voltage_1 = p2->voltage_1; p->voltage_2 = p2->voltage_2; p->voltage_3 = p2->voltage_3;
  p->voltage_4 = p2->voltage_4;
  return p; }
static inline LV_VOLTAGE_t *LV_VOLTAGE_assign_from_pe(LV_VOLTAGE_t *p,
  uint16_t v0, uint8_t v1, uint8_t v2, uint8_t v3, uint8_t v4)
{ flatbuffers_uint16_assign_from_pe(&p->total_voltage, v0); p->voltage_1 = v1; p->voltage_2 = v2; p->voltage_3 = v3;
  p->voltage_4 = v4;
  return p; }
static inline LV_VOLTAGE_t *LV_VOLTAGE_copy_from_pe(LV_VOLTAGE_t *p, const LV_VOLTAGE_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->total_voltage, &p2->total_voltage); p->voltage_1 = p2->voltage_1; p->voltage_2 = p2->voltage_2; p->voltage_3 = p2->voltage_3;
  p->voltage_4 = p2->voltage_4;
  return p; }
__flatbuffers_build_struct(flatbuffers_, LV_VOLTAGE, 6, 2, LV_VOLTAGE_file_identifier, LV_VOLTAGE_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, LV_VOLTAGE, LV_VOLTAGE_t)

#define __LV_TEMPERATURE_formal_args , uint16_t v0, uint8_t v1
#define __LV_TEMPERATURE_call_args , v0, v1
static inline LV_TEMPERATURE_t *LV_TEMPERATURE_assign(LV_TEMPERATURE_t *p, uint16_t v0, uint8_t v1)
{ p->battery_temperature = v0; p->dcdc_temperature = v1;
  return p; }
static inline LV_TEMPERATURE_t *LV_TEMPERATURE_copy(LV_TEMPERATURE_t *p, const LV_TEMPERATURE_t *p2)
{ p->battery_temperature = p2->battery_temperature; p->dcdc_temperature = p2->dcdc_temperature;
  return p; }
static inline LV_TEMPERATURE_t *LV_TEMPERATURE_assign_to_pe(LV_TEMPERATURE_t *p, uint16_t v0, uint8_t v1)
{ flatbuffers_uint16_assign_to_pe(&p->battery_temperature, v0); p->dcdc_temperature = v1;
  return p; }
static inline LV_TEMPERATURE_t *LV_TEMPERATURE_copy_to_pe(LV_TEMPERATURE_t *p, const LV_TEMPERATURE_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->battery_temperature, &p2->battery_temperature); p->dcdc_temperature = p2->dcdc_temperature;
  return p; }
static inline LV_TEMPERATURE_t *LV_TEMPERATURE_assign_from_pe(LV_TEMPERATURE_t *p, uint16_t v0, uint8_t v1)
{ flatbuffers_uint16_assign_from_pe(&p->battery_temperature, v0); p->dcdc_temperature = v1;
  return p; }
static inline LV_TEMPERATURE_t *LV_TEMPERATURE_copy_from_pe(LV_TEMPERATURE_t *p, const LV_TEMPERATURE_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->battery_temperature, &p2->battery_temperature); p->dcdc_temperature = p2->dcdc_temperature;
  return p; }
__flatbuffers_build_struct(flatbuffers_, LV_TEMPERATURE, 4, 2, LV_TEMPERATURE_file_identifier, LV_TEMPERATURE_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, LV_TEMPERATURE, LV_TEMPERATURE_t)

#define __COOLING_STATUS_formal_args , uint8_t v0, uint8_t v1, uint8_t v2
#define __COOLING_STATUS_call_args , v0, v1, v2
static inline COOLING_STATUS_t *COOLING_STATUS_assign(COOLING_STATUS_t *p, uint8_t v0, uint8_t v1, uint8_t v2)
{ p->hv_fan_speed = v0; p->lv_fan_speed = v1; p->pump_speed = v2;
  return p; }
static inline COOLING_STATUS_t *COOLING_STATUS_copy(COOLING_STATUS_t *p, const COOLING_STATUS_t *p2)
{ p->hv_fan_speed = p2->hv_fan_speed; p->lv_fan_speed = p2->lv_fan_speed; p->pump_speed = p2->pump_speed;
  return p; }
static inline COOLING_STATUS_t *COOLING_STATUS_assign_to_pe(COOLING_STATUS_t *p, uint8_t v0, uint8_t v1, uint8_t v2)
{ p->hv_fan_speed = v0; p->lv_fan_speed = v1; p->pump_speed = v2;
  return p; }
static inline COOLING_STATUS_t *COOLING_STATUS_copy_to_pe(COOLING_STATUS_t *p, const COOLING_STATUS_t *p2)
{ p->hv_fan_speed = p2->hv_fan_speed; p->lv_fan_speed = p2->lv_fan_speed; p->pump_speed = p2->pump_speed;
  return p; }
static inline COOLING_STATUS_t *COOLING_STATUS_assign_from_pe(COOLING_STATUS_t *p, uint8_t v0, uint8_t v1, uint8_t v2)
{ p->hv_fan_speed = v0; p->lv_fan_speed = v1; p->pump_speed = v2;
  return p; }
static inline COOLING_STATUS_t *COOLING_STATUS_copy_from_pe(COOLING_STATUS_t *p, const COOLING_STATUS_t *p2)
{ p->hv_fan_speed = p2->hv_fan_speed; p->lv_fan_speed = p2->lv_fan_speed; p->pump_speed = p2->pump_speed;
  return p; }
__flatbuffers_build_struct(flatbuffers_, COOLING_STATUS, 3, 1, COOLING_STATUS_file_identifier, COOLING_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, COOLING_STATUS, COOLING_STATUS_t)

#define __HV_CELLS_VOLTAGE_formal_args , uint8_t v0, uint16_t v1, uint16_t v2, uint16_t v3
#define __HV_CELLS_VOLTAGE_call_args , v0, v1, v2, v3
static inline HV_CELLS_VOLTAGE_t *HV_CELLS_VOLTAGE_assign(HV_CELLS_VOLTAGE_t *p, uint8_t v0, uint16_t v1, uint16_t v2, uint16_t v3)
{ p->cell_index = v0; p->voltage_0 = v1; p->voltage_1 = v2; p->voltage_2 = v3;
  return p; }
static inline HV_CELLS_VOLTAGE_t *HV_CELLS_VOLTAGE_copy(HV_CELLS_VOLTAGE_t *p, const HV_CELLS_VOLTAGE_t *p2)
{ p->cell_index = p2->cell_index; p->voltage_0 = p2->voltage_0; p->voltage_1 = p2->voltage_1; p->voltage_2 = p2->voltage_2;
  return p; }
static inline HV_CELLS_VOLTAGE_t *HV_CELLS_VOLTAGE_assign_to_pe(HV_CELLS_VOLTAGE_t *p, uint8_t v0, uint16_t v1, uint16_t v2, uint16_t v3)
{ p->cell_index = v0; flatbuffers_uint16_assign_to_pe(&p->voltage_0, v1); flatbuffers_uint16_assign_to_pe(&p->voltage_1, v2); flatbuffers_uint16_assign_to_pe(&p->voltage_2, v3);
  return p; }
static inline HV_CELLS_VOLTAGE_t *HV_CELLS_VOLTAGE_copy_to_pe(HV_CELLS_VOLTAGE_t *p, const HV_CELLS_VOLTAGE_t *p2)
{ p->cell_index = p2->cell_index; flatbuffers_uint16_copy_to_pe(&p->voltage_0, &p2->voltage_0); flatbuffers_uint16_copy_to_pe(&p->voltage_1, &p2->voltage_1); flatbuffers_uint16_copy_to_pe(&p->voltage_2, &p2->voltage_2);
  return p; }
static inline HV_CELLS_VOLTAGE_t *HV_CELLS_VOLTAGE_assign_from_pe(HV_CELLS_VOLTAGE_t *p, uint8_t v0, uint16_t v1, uint16_t v2, uint16_t v3)
{ p->cell_index = v0; flatbuffers_uint16_assign_from_pe(&p->voltage_0, v1); flatbuffers_uint16_assign_from_pe(&p->voltage_1, v2); flatbuffers_uint16_assign_from_pe(&p->voltage_2, v3);
  return p; }
static inline HV_CELLS_VOLTAGE_t *HV_CELLS_VOLTAGE_copy_from_pe(HV_CELLS_VOLTAGE_t *p, const HV_CELLS_VOLTAGE_t *p2)
{ p->cell_index = p2->cell_index; flatbuffers_uint16_copy_from_pe(&p->voltage_0, &p2->voltage_0); flatbuffers_uint16_copy_from_pe(&p->voltage_1, &p2->voltage_1); flatbuffers_uint16_copy_from_pe(&p->voltage_2, &p2->voltage_2);
  return p; }
__flatbuffers_build_struct(flatbuffers_, HV_CELLS_VOLTAGE, 8, 2, HV_CELLS_VOLTAGE_file_identifier, HV_CELLS_VOLTAGE_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, HV_CELLS_VOLTAGE, HV_CELLS_VOLTAGE_t)

#define __HV_CELLS_TEMP_formal_args ,\
  uint8_t v0, uint8_t v1, uint8_t v2, uint8_t v3,\
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7
#define __HV_CELLS_TEMP_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7
static inline HV_CELLS_TEMP_t *HV_CELLS_TEMP_assign(HV_CELLS_TEMP_t *p,
  uint8_t v0, uint8_t v1, uint8_t v2, uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7)
{ p->cell_index = v0; p->temp_0 = v1; p->temp_1 = v2; p->temp_2 = v3;
  p->temp_3 = v4; p->temp_4 = v5; p->temp_5 = v6; p->temp_6 = v7;
  return p; }
static inline HV_CELLS_TEMP_t *HV_CELLS_TEMP_copy(HV_CELLS_TEMP_t *p, const HV_CELLS_TEMP_t *p2)
{ p->cell_index = p2->cell_index; p->temp_0 = p2->temp_0; p->temp_1 = p2->temp_1; p->temp_2 = p2->temp_2;
  p->temp_3 = p2->temp_3; p->temp_4 = p2->temp_4; p->temp_5 = p2->temp_5; p->temp_6 = p2->temp_6;
  return p; }
static inline HV_CELLS_TEMP_t *HV_CELLS_TEMP_assign_to_pe(HV_CELLS_TEMP_t *p,
  uint8_t v0, uint8_t v1, uint8_t v2, uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7)
{ p->cell_index = v0; p->temp_0 = v1; p->temp_1 = v2; p->temp_2 = v3;
  p->temp_3 = v4; p->temp_4 = v5; p->temp_5 = v6; p->temp_6 = v7;
  return p; }
static inline HV_CELLS_TEMP_t *HV_CELLS_TEMP_copy_to_pe(HV_CELLS_TEMP_t *p, const HV_CELLS_TEMP_t *p2)
{ p->cell_index = p2->cell_index; p->temp_0 = p2->temp_0; p->temp_1 = p2->temp_1; p->temp_2 = p2->temp_2;
  p->temp_3 = p2->temp_3; p->temp_4 = p2->temp_4; p->temp_5 = p2->temp_5; p->temp_6 = p2->temp_6;
  return p; }
static inline HV_CELLS_TEMP_t *HV_CELLS_TEMP_assign_from_pe(HV_CELLS_TEMP_t *p,
  uint8_t v0, uint8_t v1, uint8_t v2, uint8_t v3,
  uint8_t v4, uint8_t v5, uint8_t v6, uint8_t v7)
{ p->cell_index = v0; p->temp_0 = v1; p->temp_1 = v2; p->temp_2 = v3;
  p->temp_3 = v4; p->temp_4 = v5; p->temp_5 = v6; p->temp_6 = v7;
  return p; }
static inline HV_CELLS_TEMP_t *HV_CELLS_TEMP_copy_from_pe(HV_CELLS_TEMP_t *p, const HV_CELLS_TEMP_t *p2)
{ p->cell_index = p2->cell_index; p->temp_0 = p2->temp_0; p->temp_1 = p2->temp_1; p->temp_2 = p2->temp_2;
  p->temp_3 = p2->temp_3; p->temp_4 = p2->temp_4; p->temp_5 = p2->temp_5; p->temp_6 = p2->temp_6;
  return p; }
__flatbuffers_build_struct(flatbuffers_, HV_CELLS_TEMP, 8, 1, HV_CELLS_TEMP_file_identifier, HV_CELLS_TEMP_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, HV_CELLS_TEMP, HV_CELLS_TEMP_t)

#define __SET_CHG_POWER_formal_args , uint16_t v0, uint16_t v1
#define __SET_CHG_POWER_call_args , v0, v1
static inline SET_CHG_POWER_t *SET_CHG_POWER_assign(SET_CHG_POWER_t *p, uint16_t v0, uint16_t v1)
{ p->current = v0; p->voltage = v1;
  return p; }
static inline SET_CHG_POWER_t *SET_CHG_POWER_copy(SET_CHG_POWER_t *p, const SET_CHG_POWER_t *p2)
{ p->current = p2->current; p->voltage = p2->voltage;
  return p; }
static inline SET_CHG_POWER_t *SET_CHG_POWER_assign_to_pe(SET_CHG_POWER_t *p, uint16_t v0, uint16_t v1)
{ flatbuffers_uint16_assign_to_pe(&p->current, v0); flatbuffers_uint16_assign_to_pe(&p->voltage, v1);
  return p; }
static inline SET_CHG_POWER_t *SET_CHG_POWER_copy_to_pe(SET_CHG_POWER_t *p, const SET_CHG_POWER_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->current, &p2->current); flatbuffers_uint16_copy_to_pe(&p->voltage, &p2->voltage);
  return p; }
static inline SET_CHG_POWER_t *SET_CHG_POWER_assign_from_pe(SET_CHG_POWER_t *p, uint16_t v0, uint16_t v1)
{ flatbuffers_uint16_assign_from_pe(&p->current, v0); flatbuffers_uint16_assign_from_pe(&p->voltage, v1);
  return p; }
static inline SET_CHG_POWER_t *SET_CHG_POWER_copy_from_pe(SET_CHG_POWER_t *p, const SET_CHG_POWER_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->current, &p2->current); flatbuffers_uint16_copy_from_pe(&p->voltage, &p2->voltage);
  return p; }
__flatbuffers_build_struct(flatbuffers_, SET_CHG_POWER, 4, 2, SET_CHG_POWER_file_identifier, SET_CHG_POWER_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, SET_CHG_POWER, SET_CHG_POWER_t)

#define __CHG_STATUS_formal_args , Status_enum_t v0
#define __CHG_STATUS_call_args , v0
static inline CHG_STATUS_t *CHG_STATUS_assign(CHG_STATUS_t *p, Status_enum_t v0)
{ p->status = v0;
  return p; }
static inline CHG_STATUS_t *CHG_STATUS_copy(CHG_STATUS_t *p, const CHG_STATUS_t *p2)
{ p->status = p2->status;
  return p; }
static inline CHG_STATUS_t *CHG_STATUS_assign_to_pe(CHG_STATUS_t *p, Status_enum_t v0)
{ p->status = v0;
  return p; }
static inline CHG_STATUS_t *CHG_STATUS_copy_to_pe(CHG_STATUS_t *p, const CHG_STATUS_t *p2)
{ p->status = p2->status;
  return p; }
static inline CHG_STATUS_t *CHG_STATUS_assign_from_pe(CHG_STATUS_t *p, Status_enum_t v0)
{ p->status = v0;
  return p; }
static inline CHG_STATUS_t *CHG_STATUS_copy_from_pe(CHG_STATUS_t *p, const CHG_STATUS_t *p2)
{ p->status = p2->status;
  return p; }
__flatbuffers_build_struct(flatbuffers_, CHG_STATUS, 1, 1, CHG_STATUS_file_identifier, CHG_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, CHG_STATUS, CHG_STATUS_t)

#define __SET_CHG_STATUS_formal_args , Status_enum_t v0
#define __SET_CHG_STATUS_call_args , v0
static inline SET_CHG_STATUS_t *SET_CHG_STATUS_assign(SET_CHG_STATUS_t *p, Status_enum_t v0)
{ p->status = v0;
  return p; }
static inline SET_CHG_STATUS_t *SET_CHG_STATUS_copy(SET_CHG_STATUS_t *p, const SET_CHG_STATUS_t *p2)
{ p->status = p2->status;
  return p; }
static inline SET_CHG_STATUS_t *SET_CHG_STATUS_assign_to_pe(SET_CHG_STATUS_t *p, Status_enum_t v0)
{ p->status = v0;
  return p; }
static inline SET_CHG_STATUS_t *SET_CHG_STATUS_copy_to_pe(SET_CHG_STATUS_t *p, const SET_CHG_STATUS_t *p2)
{ p->status = p2->status;
  return p; }
static inline SET_CHG_STATUS_t *SET_CHG_STATUS_assign_from_pe(SET_CHG_STATUS_t *p, Status_enum_t v0)
{ p->status = v0;
  return p; }
static inline SET_CHG_STATUS_t *SET_CHG_STATUS_copy_from_pe(SET_CHG_STATUS_t *p, const SET_CHG_STATUS_t *p2)
{ p->status = p2->status;
  return p; }
__flatbuffers_build_struct(flatbuffers_, SET_CHG_STATUS, 1, 1, SET_CHG_STATUS_file_identifier, SET_CHG_STATUS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, SET_CHG_STATUS, SET_CHG_STATUS_t)

#define __CHG_SETTINGS_formal_args , uint8_t v0
#define __CHG_SETTINGS_call_args , v0
static inline CHG_SETTINGS_t *CHG_SETTINGS_assign(CHG_SETTINGS_t *p, uint8_t v0)
{ p->v_cutoff = v0;
  return p; }
static inline CHG_SETTINGS_t *CHG_SETTINGS_copy(CHG_SETTINGS_t *p, const CHG_SETTINGS_t *p2)
{ p->v_cutoff = p2->v_cutoff;
  return p; }
static inline CHG_SETTINGS_t *CHG_SETTINGS_assign_to_pe(CHG_SETTINGS_t *p, uint8_t v0)
{ p->v_cutoff = v0;
  return p; }
static inline CHG_SETTINGS_t *CHG_SETTINGS_copy_to_pe(CHG_SETTINGS_t *p, const CHG_SETTINGS_t *p2)
{ p->v_cutoff = p2->v_cutoff;
  return p; }
static inline CHG_SETTINGS_t *CHG_SETTINGS_assign_from_pe(CHG_SETTINGS_t *p, uint8_t v0)
{ p->v_cutoff = v0;
  return p; }
static inline CHG_SETTINGS_t *CHG_SETTINGS_copy_from_pe(CHG_SETTINGS_t *p, const CHG_SETTINGS_t *p2)
{ p->v_cutoff = p2->v_cutoff;
  return p; }
__flatbuffers_build_struct(flatbuffers_, CHG_SETTINGS, 1, 1, CHG_SETTINGS_file_identifier, CHG_SETTINGS_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, CHG_SETTINGS, CHG_SETTINGS_t)

#include "../../../external/flatcc/flatcc_epilogue.h"
#endif /* SCHEMA_BUILDER_H */
